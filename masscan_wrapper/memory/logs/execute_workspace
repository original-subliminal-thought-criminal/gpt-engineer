[{"role": "system", "content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with one code block that includes all the necessary macos terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallell if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\n"}, {"role": "user", "content": "Information about the codebase:\n\n```setup.py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name=\"masscan-wrapper\",\n    version=\"0.1.0\",\n    packages=find_packages(),\n    install_requires=[],\n    extras_require={\n        \"dev\": [\n            \"pytest\",\n            \"flake8\",\n        ],\n    },\n    entry_points={},\n)\n```\n\n```README.md\n# Masscan Wrapper\n\nA Python wrapper for the masscan tool, made by Darpanet.\n\n## Installation\n\n1. Install masscan on your system.\n2. Clone this repository and navigate to the root directory.\n3. Run `pip install .` to install the masscan-wrapper module.\n\n## Usage\n\n```python\nfrom masscan_wrapper import MasscanWrapper\n\nwrapper = MasscanWrapper(rate=1000, exclusion_file=\"exclude.txt\", hello_string=\"Hello\", output_format=\"json\")\nresults = wrapper.run_scan(target=\"127.0.0.1\", ports=\"80,443\")\nprint(results)\n```\n\n## Development\n\n1. Install development dependencies with `pip install -e .[dev]`.\n2. Run tests with `pytest`.\n3. Check code style with `flake8`.\n```\n\n```masscan_wrapper/__init__.py\nfrom .masscan_wrapper import MasscanWrapper\n```\n\n```masscan_wrapper/masscan_wrapper.py\nimport subprocess\nfrom typing import Dict, Any\n\n\nclass MasscanWrapper:\n    def __init__(self, rate: int, exclusion_file: str, hello_string: str, output_format: str):\n        self.rate = rate\n        self.exclusion_file = exclusion_file\n        self.hello_string = hello_string\n        self.output_format = output_format\n\n    def set_rate(self, rate: int):\n        self.rate = rate\n\n    def set_exclusion_file(self, exclusion_file: str):\n        self.exclusion_file = exclusion_file\n\n    def set_hello_string(self, hello_string: str):\n        self.hello_string = hello_string\n\n    def set_output_format(self, output_format: str):\n        self.output_format = output_format\n\n    def run_scan(self, target: str, ports: str) -> Dict[str, Any]:\n        cmd = [\n            \"masscan\",\n            \"-p\", ports,\n            \"--rate\", str(self.rate),\n            \"--excludefile\", self.exclusion_file,\n            \"--hello-string\", self.hello_string,\n            \"--output-format\", self.output_format,\n            target,\n        ]\n        result = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        return parse_output(result.stdout)\n\n\ndef parse_output(output: str) -> Dict[str, Any]:\n    if output_format == \"json\":\n        return json.loads(output)\n    elif output_format == \"xml\":\n        # Implement XML parsing here\n        pass\n    else:\n        raise ValueError(\"Unsupported output format\")\n```\n\n```tests/__init__.py\n```\n\n```tests/test_masscan_wrapper.py\nimport pytest\nfrom masscan_wrapper.masscan_wrapper import MasscanWrapper, parse_output\n\ndef test_masscan_wrapper_init():\n    wrapper = MasscanWrapper(rate=1000, exclusion_file=\"exclude.txt\", hello_string=\"Hello\", output_format=\"json\")\n    assert wrapper.rate == 1000\n    assert wrapper.exclusion_file == \"exclude.txt\"\n    assert wrapper.hello_string == \"Hello\"\n    assert wrapper.output_format == \"json\"\n\ndef test_set_rate():\n    wrapper = MasscanWrapper(rate=1000)\n    wrapper.set_rate(2000)\n    assert wrapper.rate == 2000\n\ndef test_set_exclusion_file():\n    wrapper = MasscanWrapper(exclusion_file=\"exclude.txt\")\n    wrapper.set_exclusion_file(\"new_exclude.txt\")\n    assert wrapper.exclusion_file == \"new_exclude.txt\"\n\ndef test_set_hello_string():\n    wrapper = MasscanWrapper(hello_string=\"Hello\")\n    wrapper.set_hello_string(\"New Hello\")\n    assert wrapper.hello_string == \"New Hello\"\n\ndef test_set_output_format():\n    wrapper = MasscanWrapper(output_format=\"json\")\n    wrapper.set_output_format(\"xml\")\n    assert wrapper.output_format == \"xml\"\n\ndef test_run_scan(mocker):\n    wrapper = MasscanWrapper(rate=1000, exclusion_file=\"exclude.txt\", hello_string=\"Hello\", output_format=\"json\")\n    mocker.patch(\"masscan_wrapper.masscan_wrapper.subprocess.run\")\n    wrapper.run_scan(target=\"127.0.0.1\", ports=\"80,443\")\n    wrapper.subprocess.run.assert_called_once()\n\ndef test_parse_output():\n    sample_output = '{\"ip\": \"127.0.0.1\", \"ports\": [{\"port\": 80, \"proto\": \"tcp\", \"status\": \"open\"}]}'\n    parsed_output = parse_output(sample_output)\n    assert parsed_output[\"ip\"] == \"127.0.0.1\"\n    assert parsed_output[\"ports\"][0][\"port\"] == 80\n    assert parsed_output[\"ports\"][0][\"proto\"] == \"tcp\"\n    assert parsed_output[\"ports\"][0][\"status\"] == \"open\"\n```\n\n```flake8\n[flake8]\nmax-line-length = 88\n```\n\n```gitignore\n__pycache__/\n*.pyc\n*.pyo\n*.egg-info/\ndist/\nbuild/\n```"}, {"role": "assistant", "content": "```\npip install --user .\npip install --user -e .[dev]\npytest\nflake8\n```"}]