[{"role": "system", "content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\n\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\nThen you will output the content of each file, with syntax below.\n(You will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.)\nMake sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nFile syntax:\n\n```file.py/ts/html\n[ADD YOUR CODE HERE]\n```\n\nUseful to know:\nYou almost always put different classes in different files\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n"}, {"role": "system", "content": "Instructions: Please write a python module which acts as a wrapper to masscan. It should be able to use all of the major masscan features such as setting rate, exclusion file, hello-string, and various outputs. This module should be installable and come with a readme documenting how to install it, how to use it, and marking that it is a module made by \"Darpanet\". Please be sure to include flake8 and make the code pep compliant. All functions should have descriptive docstrings. Please also create a professional file structure for the module."}, {"role": "user", "content": "You are a super smart developer. You have been asked to make a specification for a program.\n\nThink step by step to make sure we get a high quality specification and we don't miss anything.\nFirst, be super explicit about what the program should do, which features it should have\nand give details about anything that might be unclear. **Don't leave anything unclear or undefined.**\n\nSecond, lay out the names of the core classes, functions, methods that will be necessary,\nas well as a quick comment on their purpose.\nFinally list all non-standard dependencies you'll have to use.\n\nThis specification will be used later as the basis for the implementation."}, {"role": "assistant", "content": "Specification for Masscan Wrapper Python Module\n\nProgram Purpose:\nThe program should act as a Python wrapper for the masscan tool, allowing users to interact with masscan using Python code. The wrapper should support all major masscan features such as setting rate, exclusion file, hello-string, and various outputs. The module should be installable and come with a README file documenting how to install it, how to use it, and marking that it is a module made by \"Darpanet\". The code should be PEP compliant and include flake8 for linting. All functions should have descriptive docstrings.\n\nCore Classes, Functions, and Methods:\n1. MasscanWrapper (class)\n   - Purpose: Main class for interacting with masscan tool.\n   - Methods:\n     - __init__(self, rate: int, exclusion_file: str, hello_string: str, output_format: str)\n     - set_rate(self, rate: int)\n     - set_exclusion_file(self, exclusion_file: str)\n     - set_hello_string(self, hello_string: str)\n     - set_output_format(self, output_format: str)\n     - run_scan(self, target: str, ports: str) -> Dict[str, Any]\n\n2. parse_output (function)\n   - Purpose: Parse masscan output and return a dictionary with the results.\n   - Arguments:\n     - output: str\n   - Returns: Dict[str, Any]\n\nNon-standard Dependencies:\n- masscan: The masscan tool should be installed on the user's system.\n\nFile Structure:\nmasscan_wrapper/\n|-- masscan_wrapper/\n|   |-- __init__.py\n|   |-- masscan_wrapper.py\n|-- tests/\n|   |-- __init__.py\n|   |-- test_masscan_wrapper.py\n|-- README.md\n|-- setup.py\n|-- .flake8\n|-- .gitignore"}]